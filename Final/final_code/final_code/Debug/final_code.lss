
final_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000018e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000018e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000734  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000689  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ba  00000000  00000000  00000fe5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  000012a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b9  00000000  00000000  000012e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000091  00000000  00000000  000016a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001732  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__vector_5>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 8b 00 	jmp	0x116	; 0x116 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include <util/delay.h>

unsigned char counter;

int main(void){
	DDRB = 0xFF;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	84 b9       	out	0x04, r24	; 4
	DDRD = 0x00;
  94:	1a b8       	out	0x0a, r1	; 10
	PCMSK2 = 0xE0;
  96:	80 ee       	ldi	r24, 0xE0	; 224
  98:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__DATA_REGION_ORIGIN__+0xd>
	PCICR = 0x04;
  9c:	84 e0       	ldi	r24, 0x04	; 4
  9e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
	counter = 0;
  a2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	sei();
  a6:	78 94       	sei
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <main+0x18>

000000aa <__vector_5>:
	while(1){}
}

ISR(PCINT2_vect){
  aa:	1f 92       	push	r1
  ac:	0f 92       	push	r0
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	0f 92       	push	r0
  b2:	11 24       	eor	r1, r1
  b4:	8f 93       	push	r24
  b6:	9f 93       	push	r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	8f e3       	ldi	r24, 0x3F	; 63
  ba:	9c e9       	ldi	r25, 0x9C	; 156
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <__vector_5+0x12>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <__vector_5+0x18>
  c2:	00 00       	nop
	static unsigned char ucInput;
	_delay_ms(10);
	ucInput = PIND;
  c4:	89 b1       	in	r24, 0x09	; 9
	ucInput &= 0xE0;
	ucInput = ucInput >> 5;
	switch(ucInput){
  c6:	82 95       	swap	r24
  c8:	86 95       	lsr	r24
  ca:	87 70       	andi	r24, 0x07	; 7
  cc:	82 30       	cpi	r24, 0x02	; 2
  ce:	79 f0       	breq	.+30     	; 0xee <__vector_5+0x44>
  d0:	84 30       	cpi	r24, 0x04	; 4
  d2:	81 f0       	breq	.+32     	; 0xf4 <__vector_5+0x4a>
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	99 f4       	brne	.+38     	; 0xfe <__vector_5+0x54>
		case 1:		counter++;
  d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  dc:	8f 5f       	subi	r24, 0xFF	; 255
					if(counter>15)
  de:	80 31       	cpi	r24, 0x10	; 16
  e0:	18 f4       	brcc	.+6      	; 0xe8 <__vector_5+0x3e>
	_delay_ms(10);
	ucInput = PIND;
	ucInput &= 0xE0;
	ucInput = ucInput >> 5;
	switch(ucInput){
		case 1:		counter++;
  e2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  e6:	0b c0       	rjmp	.+22     	; 0xfe <__vector_5+0x54>
					if(counter>15)
						counter = 0;
  e8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  ec:	08 c0       	rjmp	.+16     	; 0xfe <__vector_5+0x54>
					break;
		case 2:		counter = 0;
  ee:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
					break;
  f2:	05 c0       	rjmp	.+10     	; 0xfe <__vector_5+0x54>
		case 4:		counter--;
  f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f8:	81 50       	subi	r24, 0x01	; 1
  fa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
					if(counter < 0)
					counter = 15;
					break;
	}
					
	PORTB = counter;
  fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 102:	85 b9       	out	0x05, r24	; 5
	PCIFR = 1 << PCIF2;
 104:	84 e0       	ldi	r24, 0x04	; 4
 106:	8b bb       	out	0x1b, r24	; 27
 108:	9f 91       	pop	r25
 10a:	8f 91       	pop	r24
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <_exit>:
 116:	f8 94       	cli

00000118 <__stop_program>:
 118:	ff cf       	rjmp	.-2      	; 0x118 <__stop_program>
